1. git init

2. git status

3. git add octocat.txt // add this file to staging area
    git add <file>
	git add <directory> // stage all changes in <directory> for the next commit

4. git commit -m "add cate file story" // store to local repo

5. git add '*.txt' // use wild card to add all the txt files

6. git commit -m 'Add a bunch of files'

7. git log // log of commits

8. git remote add origin https://github.com/try-git/try_git.git  // create a remote repo with the url which is at github server

9. git push -u origin master // push the commits on local branch master to the remote repo named origin, -u memorizes

10. git pull origin master // pull changes from origin that are made on master
	e.g., git pull private feature/RICE-20630   // merge the changes in feature/RICE-20630 (in remote repo called private) into feature/testSmallcmg 

11. git diff HEAD // head is pointer to the last change

12. git add octofamily/octodog.txt // add this txt file to staging

13. git diff --staged // show staged diff 

14. git reset octofamily/octodog.txt  // unstaging this txt file

15. git checkout -- octocat.txt // get rid of all the changes since the last commit for octocat.txt

16. git branch clean_up  // create a branch named clean_up for working on a specific task
	git checkout -b clean_up master-staging  // create a branch called clean_up from master-staging and switch to it

17. git checkout clean_up  // switch the branch to clean_up

18. git rm '*.txt'  // remove all the txt files and stage the removal

19. git commit -m "remove all the txt files"  // commit the staged removal

20. git checkout master  // switch back to branch master

21. git merge clean_up  // merge all the commits in clean_up to master

22. git branch -d clean_up  // delete this branch since the task is done in branch clean_up
	git push origin --delete clean_up // delete this branch remotely on origin

23. git push  // push master to remote url



                               git stash
--------------------------- ---------------------------------------------------
1. git stash  // usually used with git status, saves uncommited (both staged and unstaged) changes ,
   // but won't stash untracked or ignored files, for example, new files that are not staged
   git stash -u // or --include-untracked, to stash untracked changes 
   git stash -a // or --all, to stash ignored files 

2. git stash pop  // apply all the changes and removes them from stash

3. git stash apply  // apply the cahnges and also kepp them

4. by default Git will not stash changes made to untracked or ignored files

5. git stash -u  // tells git stash to also stash untracked files

6. git stash -a(or --all)   // stash also ignored files

7. git stash list  // show multiple stashes

8. git stash save "any description" // give this stash a name so that it is easy to find in stash list

9. git stash pop  // by default it re-apply the most recent stash

10. git stash pop stash@{2}   // re-apply the stash numbered 2

11. git stash show // view a summary of a stash
	git stash show stash@{0}

12. git stash show -p(or --patch)  // view the full diff of a stash

13. git stash -p(or --patch)   // it will iterate through each changed hunk and ask whether you wish to stash it

14. ctrl -c aborts the stash process

15. git stash branch add-style stash@{1}  // create a branch named add-style from stash@{1}

16. git stash drop stash@{1}  // clean this stash

17. git stash clear // clean all stashes



                            pull and merge changes from master-staging
----------------------------------------------------------------------------------------------
1. git checkout master-staging    // switch to branch master-staging

2. git pull --rebase  // pull the latest code from master staging

3. git checkout feature/RICE-18708  // switch to feature branch

4. git merge master-staging   // merge all the latest changes to feature branch



                            git checkout and revert // undo and redo changes
----------------------------------------------------------------------------------------------
1. git revert <commit>   // undo all the changes in this commit, which actually changes the files. 
			// It also makes another commit for undoing all the changes, keeping a complete history
			// this is safe because of the entire history, anything can be restored
	git revert HEAD  // undo the most recent commit
	
2. git reset hello.txt   // remove the changes in hello.txt from staging area, doing no changes to files. green to red
	git reset // reset the staging area to match the most recent commit: unstage all files without overwriting any changes
	git reset --hard  // remove all changes in staging area and undo the changes, i.e., green to red to disappeared
	
3. git reset commitc1 // revert to commitc1, all changes made after c1 will still be in the working directory in the unstaged area
					  // and you will not see the history after c1
	git reset --hard <commitc1>  // all changes after c1 disappears
	git reset HEAD~1  // uncommit the most recent commit and put the changes in unstaged area.
   git reset HEAD~2   // reset the most recent 2 commits and put all the changes in these two commits in unstaged area

4. git reset --hard HEAD~2   // even remove from unstaged area

5. git checkout 11e5d2fs // This makes your working directory match the exact state of this commit
						 // it will create another branch called "(detached from b8d3a1e)", and you can switch to the branch you were in
						 // and the newly created branch will disappear

6. git checkout 11e5d2fs hello.py   // Remember, unlike checking out a commit, this does affect the current state of your project.
									// changes will be in staged area

									
									
									
									      git amend 
------------------------------------------------------------------------------------------------------
git amend: It lets you combine staged changes with the previous commit
git add hello.py
git commit -m "asdfdgfgg"   // forgot to add main.py
git add main.py
git commit --amend --no-edit // amend to commit(adding main.py) without changing the message
							 // looks like one single commit (added two files)
// it deletes the old commit and makes a new commit, the resulting commit looks like a single one

                                          git rebase
------------------------------------------------------------------------------------------------------






                                          git remote // an easy way to pass URLs to "sharing commands"
										  git fetch  // display commits from remote repo
------------------------------------------------------------------------------------------------------
1. git remote   // list the remote connections on your workspace
   git remote -v // includes the URL
   
2. git remote add <name> <url> // add a new remote repo with url and naming it
   e.g., git remote add aiop http://.......
   
3. git remote rm <name>  // remove the remote repo
	git remote rm aiop
	
4. git remote rename <old-name> <new name>
	git remote rename aiop aiop-dev
	
5. git fetch <remote>
   git fetch <remote> <branch>





























 